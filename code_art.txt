#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

// Configuración del LCD I2C
LiquidCrystal_I2C lcd(0x27, 16, 2); // Ajusta la dirección si es necesario

// Configuración del teclado matricial
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Variables para la contraseña
char X; 
char B[6]; 
char C[6] = "0504A"; // Contraseña
byte D = 0; 
int E = 0;

// Pines para el buzzer y LEDs
int ledGreen = 13;
int ledRed = 12; 
int buzzer = 11;

void setup() {
  lcd.init();
  lcd.backlight();
  pinMode(ledGreen, OUTPUT);
  pinMode(ledRed, OUTPUT);
  pinMode(buzzer, OUTPUT);
  digitalWrite(ledGreen, LOW);
  digitalWrite(ledRed, LOW);
  digitalWrite(buzzer, LOW);
}

void loop() {
  X = keypad.getKey();
  if (X) {
    B[D] = X;
    D++;
  }

  // Mostrar instrucciones en el LCD
  if (D == 0) {
    lcd.setCursor(0, 0);
    lcd.print("-DIGITE SU CLAVE ");
    lcd.setCursor(0, 1);
    lcd.print("                "); // Limpiar línea 1
  }
  if (D == 1) lcd.setCursor(6, 1), lcd.print("*___");
  if (D == 2) lcd.setCursor(6, 1), lcd.print("**__");
  if (D == 3) lcd.setCursor(6, 1), lcd.print("***_");
  if (D == 4) lcd.setCursor(6, 1), lcd.print("****");

  // Verificar contraseña al presionar 'A'
  if ((D >= 5) && (X == 'A')) {
    if (!strcmp(B, C)) {
      lcd.setCursor(0, 0);
      lcd.print(" CLAVE CORRECTA ");
      digitalWrite(ledGreen, HIGH);
      delay(1000);
      digitalWrite(ledGreen, LOW);
      D = 0;
      E = 0;
      lcd.setCursor(0, 1);
      lcd.print("                "); // Limpiar línea
    } else {
      lcd.setCursor(0, 0);
      lcd.print("CLAVE INCORRECTA");
      digitalWrite(ledRed, HIGH);
      tone(buzzer, 1000); // Activar buzzer
      delay(1000);
      digitalWrite(ledRed, LOW);
      noTone(buzzer); // Apagar buzzer
      E++;
      D = 0;
      lcd.setCursor(0, 1);
      lcd.print("                "); // Limpiar línea
    }
  }

  // Bloquear sistema tras 3 intentos fallidos
  if (E == 3) {
    lcd.setCursor(0, 0);
    lcd.print("SISTEMA BLOQUEADO");
    lcd.setCursor(0, 1);
    lcd.print("Espere 10 segundos");
    for (int i = 10; i > 0; i--) {
      lcd.setCursor(15, 1);
      lcd.print(i);
      delay(1000);
    }
    lcd.setCursor(0, 1);
    lcd.print("                "); // Limpiar línea
    D = 0;
    E = 0;
  }
}